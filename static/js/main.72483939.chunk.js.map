{"version":3,"sources":["../../src/index.js","App.js","download.js","index.js"],"names":["defaultDisplayMediaOptions","audio","video","cursor","displayMediaOptions","onEnd","onError","onStart","React","captureStream","setCaptureStream","error","setError","mediaRecorder","setMediaRecorder","recording","setRecording","stopRecording","track","e","startRecording","a","navigator","stream","recorder","MediaRecorder","toggleRecording","App","useScreenRecording","event","setVideo","data","useState","videoSrc","URL","createObjectURL","className","onClick","recordedChunks","blob","Blob","type","url","document","createElement","body","appendChild","style","href","download","click","window","revokeObjectURL","autoPlay","src","ReactDOM","render","getElementById"],"mappings":"u/CAEA,IAAMA,EAA6B,CACjCC,OADiC,EAEjCC,MAAO,CAAEC,OAAQ,W,MAGJ,WAKP,6DAAJ,GAAI,IAJNC,2BAIM,MAJgBJ,EAIhB,MAHNK,aAGM,MAHE,aAGF,MAFNC,eAEM,MAFI,aAEJ,MADNC,eACM,MADI,aACJ,IACoCC,mBADpC,eACCC,EADD,KACgBC,EADhB,OAEoBF,mBAFpB,eAECG,EAFD,KAEQC,EAFR,OAGoCJ,mBAHpC,eAGCK,EAHD,KAGgBC,EAHhB,OAI4BN,oBAJ5B,YAICO,EAJD,KAIYC,EAJZ,KAKAC,EAAgB,WACpB,IACED,MACAH,SACAJ,uBAAkC,mBAAWS,EAAX,UAClC,MAAOC,GACPb,KACAM,OAGEQ,EAAc,6BAAG,8BAAAC,EAAA,+EAEEC,uCAFF,UAEbC,EAFa,OAKnBP,MACAO,uBAA2B,YACzBL,eAEFR,MACMc,EAAW,IAAIC,cAVF,IAWnBD,kBACAA,UACAV,KACAP,EAAQ,CAAEgB,OAAF,EAAUC,aAdC,kDAgBnBR,MACAV,EAAQ,EAARA,IACAM,EAAS,EAATA,IAlBmB,0DAAH,qDAqBdc,EAAkB,kBACtBX,EAAYE,IAAkBG,KAEhC,MAAO,CACLX,cADK,EAELE,MAFK,EAGLE,cAHK,EAILE,UAJK,EAKLK,eALK,EAMLH,cANK,EAOLS,oBCrDW,SAASC,IAAO,IAAD,EACWC,EAAmB,CACxDvB,MAAO,SAACwB,GAAD,OAAWC,EAASD,EAAME,SAD3BhB,EADoB,EACpBA,UAAWW,EADS,EACTA,gBADS,EAIFlB,IAAMwB,WAJJ,mBAIrB9B,EAJqB,KAId4B,EAJc,KAKtBG,EAAW/B,GAASgC,IAAIC,gBAAgBjC,GAE9C,OACE,yBAAKkC,UAAU,QACb,0CACA,kDAEA,yBAAKA,UAAU,QACb,4BAAQC,QAASX,GACdX,EAAY,OAASkB,EAAW,QAAU,qBAE1CA,GACD,oCACE,4BAAQI,QAAS,kBCvBd,SAAkBC,GAC/B,IACMC,EAAO,IAAIC,KAAKF,EAAgB,CAAEG,KAD3B,cAEPC,EAAMR,IAAIC,gBAAgBI,GAC1BlB,EAAIsB,SAASC,cAAc,KACjCD,SAASE,KAAKC,YAAYzB,GAC1BA,EAAE0B,MAAQ,gBACV1B,EAAE2B,KAAON,EACTrB,EAAE4B,SAAW,WACb5B,EAAE6B,QACFC,OAAOjB,IAAIkB,gBAAgBV,GDaMO,CAAShB,KAAhC,YACA,2BAAOoB,UAAQ,EAACjB,UAAU,QAAQkB,IAAKrB,OElBnDsB,IAASC,OAAO,kBAAC7B,EAAD,MAASgB,SAASc,eAAe,U","file":"static/js/main.72483939.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst defaultDisplayMediaOptions = {\n  audio: false,\n  video: { cursor: \"always\" },\n};\n\nexport default function useScreenRecording({\n  displayMediaOptions = defaultDisplayMediaOptions,\n  onEnd = () => {},\n  onError = () => {},\n  onStart = () => {},\n} = {}) {\n  const [captureStream, setCaptureStream] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [mediaRecorder, setMediaRecorder] = React.useState(null);\n  const [recording, setRecording] = React.useState(false);\n  const stopRecording = () => {\n    try {\n      setRecording(false);\n      mediaRecorder.stop();\n      captureStream.getTracks().forEach((track) => track.stop());\n    } catch (e) {\n      onError(e);\n      setError(e);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getDisplayMedia(\n        displayMediaOptions\n      );\n      setRecording(true);\n      stream.getTracks().forEach((track) => {\n        track.onended = stopRecording;\n      });\n      setCaptureStream(stream);\n      const recorder = new MediaRecorder(stream);\n      recorder.ondataavailable = onEnd;\n      recorder.start();\n      setMediaRecorder(recorder);\n      onStart({ stream, recorder });\n    } catch (e) {\n      setRecording(false);\n      onError(e);\n      setError(e);\n    }\n  };\n  const toggleRecording = () =>\n    recording ? stopRecording() : startRecording();\n\n  return {\n    captureStream,\n    error,\n    mediaRecorder,\n    recording,\n    startRecording,\n    stopRecording,\n    toggleRecording,\n  };\n}\n","import React from \"react\";\n\nimport useScreenRecording from \"use-screen-recording\";\nimport download from \"./download\";\n\nexport default function App() {\n  const { recording, toggleRecording } = useScreenRecording({\n    onEnd: (event) => setVideo(event.data),\n  });\n  const [video, setVideo] = React.useState();\n  const videoSrc = video && URL.createObjectURL(video);\n\n  return (\n    <div className=\"root\">\n      <h1>React Hook</h1>\n      <h2>useScreenRecording</h2>\n\n      <div className=\"menu\">\n        <button onClick={toggleRecording}>\n          {recording ? \"Stop\" : videoSrc ? \"Retry\" : \"Start Recording\"}\n        </button>\n        {!!videoSrc && (\n          <>\n            <button onClick={() => download(videoSrc)}>Download</button>\n            <video autoPlay className=\"video\" src={videoSrc} />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","export default function download(recordedChunks) {\n  const type = \"video/mp4\";\n  const blob = new Blob(recordedChunks, { type });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style = \"display: none\";\n  a.href = url;\n  a.download = \"test.mp4\";\n  a.click();\n  window.URL.revokeObjectURL(url);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}